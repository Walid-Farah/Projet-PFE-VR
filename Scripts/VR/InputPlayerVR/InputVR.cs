//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Scripts/VR/InputPlayerVR/InputVR.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputVR: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputVR()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputVR"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""144fb2ba-88e5-4a00-8322-a2093dcb6db6"",
            ""actions"": [
                {
                    ""name"": ""OuvrirPorte"",
                    ""type"": ""Button"",
                    ""id"": ""21ceeb14-4a55-4415-bbdf-d3adf38414ec"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RemettreEnPlace"",
                    ""type"": ""Button"",
                    ""id"": ""4e3cc4d5-c64a-43ba-b10a-805220dba5da"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""140c136e-72b0-4d47-a8ae-2a07f54a222a"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OuvrirPorte"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2be61bde-d5d8-4ad6-8a49-dcdd94d3f21b"",
                    ""path"": ""<XRController>{RightHand}/menuButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RemettreEnPlace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Temperature"",
            ""id"": ""c4498d71-3031-4167-9af2-619dbc4790f8"",
            ""actions"": [
                {
                    ""name"": ""VoirTemp"",
                    ""type"": ""Button"",
                    ""id"": ""32e29a24-d781-4a97-8981-317c97e7653c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""903d805a-676c-4b98-8d1f-3a0a31f31b5a"",
                    ""path"": ""<XRController>{LeftHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VoirTemp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3541d557-71a4-41bc-b808-4392f48a8d09"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VoirTemp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_OuvrirPorte = m_Player.FindAction("OuvrirPorte", throwIfNotFound: true);
        m_Player_RemettreEnPlace = m_Player.FindAction("RemettreEnPlace", throwIfNotFound: true);
        // Temperature
        m_Temperature = asset.FindActionMap("Temperature", throwIfNotFound: true);
        m_Temperature_VoirTemp = m_Temperature.FindAction("VoirTemp", throwIfNotFound: true);
    }

    ~@InputVR()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, InputVR.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Temperature.enabled, "This will cause a leak and performance issues, InputVR.Temperature.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_OuvrirPorte;
    private readonly InputAction m_Player_RemettreEnPlace;
    public struct PlayerActions
    {
        private @InputVR m_Wrapper;
        public PlayerActions(@InputVR wrapper) { m_Wrapper = wrapper; }
        public InputAction @OuvrirPorte => m_Wrapper.m_Player_OuvrirPorte;
        public InputAction @RemettreEnPlace => m_Wrapper.m_Player_RemettreEnPlace;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @OuvrirPorte.started += instance.OnOuvrirPorte;
            @OuvrirPorte.performed += instance.OnOuvrirPorte;
            @OuvrirPorte.canceled += instance.OnOuvrirPorte;
            @RemettreEnPlace.started += instance.OnRemettreEnPlace;
            @RemettreEnPlace.performed += instance.OnRemettreEnPlace;
            @RemettreEnPlace.canceled += instance.OnRemettreEnPlace;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @OuvrirPorte.started -= instance.OnOuvrirPorte;
            @OuvrirPorte.performed -= instance.OnOuvrirPorte;
            @OuvrirPorte.canceled -= instance.OnOuvrirPorte;
            @RemettreEnPlace.started -= instance.OnRemettreEnPlace;
            @RemettreEnPlace.performed -= instance.OnRemettreEnPlace;
            @RemettreEnPlace.canceled -= instance.OnRemettreEnPlace;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Temperature
    private readonly InputActionMap m_Temperature;
    private List<ITemperatureActions> m_TemperatureActionsCallbackInterfaces = new List<ITemperatureActions>();
    private readonly InputAction m_Temperature_VoirTemp;
    public struct TemperatureActions
    {
        private @InputVR m_Wrapper;
        public TemperatureActions(@InputVR wrapper) { m_Wrapper = wrapper; }
        public InputAction @VoirTemp => m_Wrapper.m_Temperature_VoirTemp;
        public InputActionMap Get() { return m_Wrapper.m_Temperature; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TemperatureActions set) { return set.Get(); }
        public void AddCallbacks(ITemperatureActions instance)
        {
            if (instance == null || m_Wrapper.m_TemperatureActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TemperatureActionsCallbackInterfaces.Add(instance);
            @VoirTemp.started += instance.OnVoirTemp;
            @VoirTemp.performed += instance.OnVoirTemp;
            @VoirTemp.canceled += instance.OnVoirTemp;
        }

        private void UnregisterCallbacks(ITemperatureActions instance)
        {
            @VoirTemp.started -= instance.OnVoirTemp;
            @VoirTemp.performed -= instance.OnVoirTemp;
            @VoirTemp.canceled -= instance.OnVoirTemp;
        }

        public void RemoveCallbacks(ITemperatureActions instance)
        {
            if (m_Wrapper.m_TemperatureActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITemperatureActions instance)
        {
            foreach (var item in m_Wrapper.m_TemperatureActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TemperatureActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TemperatureActions @Temperature => new TemperatureActions(this);
    public interface IPlayerActions
    {
        void OnOuvrirPorte(InputAction.CallbackContext context);
        void OnRemettreEnPlace(InputAction.CallbackContext context);
    }
    public interface ITemperatureActions
    {
        void OnVoirTemp(InputAction.CallbackContext context);
    }
}
